redux 자바스크립트를 위한 라이브러리
react-redux : 리액트에서 사용하기 까다로워서 다시만든 것

Redux Toolkit : 설치도 쉽고 조금은 간단하게 사용할 수 있다.
리덕스
https://ko.redux.js.org/introducion/getting-started/
전역상태를 관리하는 라이브러리


기존 : app.js 에서 props로 계속해서 컴포넌트로 내려주었는데 너무 깊게 들어갈 수 있다.
    그러면 너무 프로그램이 복잡해진다. 그래서 외부에서 하나의 공간을 만들어두고 필요할 때 요청해서 그 값을 꺼내오는 것

스토어 : 전역으로 관리할 state값이 저장되는 곳 
액션(action) : 상태의 변화가 필요할 때 발생시키는 객체 ({type:'', playload:''})

액션 생성함수 : action creator = 컴포넌트에서 액션객체를 만들기 쉽게 미리 만들어두고 호출하는 것 (필수는 아니다.) 
increment = () => {type:'increment'}

디스패치(dispatch) : 액션을 리듀서에 집어넣는 행위 / 변화를 요청하는 행위 => 리듀서야 액션이 이거 해달래
useDispatch Hook 을 사용해서 디스패치 한다.

리듀서 (Reducer) : 상태변화를 일으키는 함수 = 현재상태와 액션을 참조해서 새로운 상태의  변화된 값을 만들어내는 함수 (return)  
액션이 변화 일으켜줘 -> 디스패치가 리듀서에 넣어줌 -> 리듀서가 액션을 받아서 상태변화를 일으킴 -> 스토어가 저장

스토어의 경우 : 전역 state값들이 들어있다. 
특징 : 하나의 프로젝트에 하나의 스토어를 사용한다.

구독 (subscribe) : 스토어에 있는 값을 가져와줘
useSelector Hook을 사용하여 컴포넌트에서 구독해 온다. (컴포넌트는 store에서 값을 가져오려면 useSelector 훅을 사용해서 가져와야한다.)


redux 리덕스의 3가지 원칙
1. single source of truth
데이터는 신뢰 가능한 단일 출처를 가져야 한다.
데이터를 여러곳에 두지 말고 하나의 스토어에 두고 관리한다.
=> 중복 데이터의 오류를 줄이고 디버깅을 쉽게 하려고

2. state is read-only
상태는 항상 읽기 전용이다. 
데이터의 흐름은 단방량이다.
액션이라는 객체를 통해서 변경요청이 되고 리듀서를 통해서 데이터(state)가 변경되야 한다.
이렇게 하면 데이터가 무엇에 의해변경 되었는지 명확하게 알 수 있다.

3. change are made with pure funcions
리듀서는 순수 함수
입력값이 정해져 있을 때 결과값이 예측할 수 있는 함수
상태를 변경하는 리듀서가 입력값이 있을 때 랜덤하지 않은 결과 일관된 결과를 리턴해야 한다.

4.